install.packages("tidyverse")
install.packages("C:/Users/roderick.bakker/Downloads/phytotools_1.0.tar.gz", repos = NULL, type = "source")
intall.packages("insol")
install.packages("insol")
install.packages("FME")
install.packages("C:/Users/roderick.bakker/Downloads/phytotools_1.0.tar.gz", repos = NULL, type = "source")
library(rvest)
webpage <- read_html("https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDNRTcurrentsDaily.html")
View(webpage)
download.file(url = "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDNRTcurrentsDaily.csv?u_current%5B(2023-02-03):1:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D,v_current%5B(2023-02-03):1:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D",
destfile = "test_sla.csv")
download.file(url = "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDNRTcurrentsDaily.csv?u_current%5B(2023-02-03):3:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D,v_current%5B(2023-02-03):1:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D",
destfile = "test_sla.csv")
download.file(url = "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDNRTcurrentsDaily.csv?u_current%5B(2023-02-03):3:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D,v_current%5B(2023-02-03):3:(2023-04-02T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D",
destfile = "test_sla.csv")
library(tidyverse)
test_sla <- read_csv("test_sla.csv")
View(test_sla)
test_sla <- read_csv("test_sla.csv",
skip = 1)
source("G:/My Drive/BIOS/Projects/Eddy_Project/R_projects/Eddy_tracking/web_scrape_testing/NOAA_webscrape_testibg.R", echo=TRUE)
library(lubridate)
today()
today() - days(90)
download.file(
url = "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDNRTcurrentsDaily.csv?u_current%5B(2023-02-03):3:(2023-04-10T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D,v_current%5B(2023-02-03):3:(2023-04-10T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D",
destfile = "test_sla_2.csv")
test_sla_2 <- read_csv("test_sla_2.csv",
skip = 1)
View(test_sla_2)
View(test_sla)
download.file(
url = "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDsshDaily.csv?sla%5B(2023-02-03):1:(2023-04-10T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D",
destfile = "test_sla.csv")
test_sla <- read_csv("test_sla.csv",
skip = 1)
getwd()
shiny::runApp('G:/My Drive/BIOS/Projects/Eddy_Project/R_projects/Eddy_tracking/Eddy_Tracking_Shiny_SLA_only/Eddy_Tracker_SLA_Only')
url <- "https://coastwatch.noaa.gov/erddap/griddap/noaacwBLENDEDsshDaily.csv?sla%5B(2023-02-03):1:(2023-04-10T00:00:00Z)%5D%5B(27.125):1:(42.125)%5D%5B(-75.875):1:(-49.875)%5D"
library(rvest)
library(tidyverse)
library(lubridate)
test_sla_3 <- read_csv(url)
View(test_sla_3)
test_sla_3 <- read_csv(url,
skip = 1)
View(test_sla_3)
install.packages("rlang")
install.packages("vctrs")
update.packages()
update.packages(checkBuilt = TRUE)
install.packages("cli")
remove.packages("vctrs")
install.packages("vctrs")
remove.packages("tibble")
install.packages("tibble")
install.packages("tibble")
shiny::runApp('G:/My Drive/BIOS/Projects/Eddy_Project/Nathalie_Eddy_Paleo/R_scripts/For_publication/GitHub/shiny_applications/1_water_profiles/Eddy_Analysis')
getwd()
setwd("G:/My Drive/BIOS/Projects/Eddy_Project/Nathalie_Eddy_Paleo/R_scripts/For_publication/GitHub/shiny_applications/1_water_profiles/Eddy_Analysis")
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_files <- data_names %>%
map(.f = read_csv, show_col_types = FALSE) %>% # import all csv files
set_names(nm = c("profiles", "profiles_mean", "eddy_tracks", "map_coords")) %>% # set names on each file
map_if( # if date column is present, format date column as dates
.p = ~ "date" %in% names(.x),
.f = ~ mutate(.x, date = as_date(date))
) %>%
map_if( # if month column is present, format month as abbreviations and set as factors
.p = ~ "month" %in% names(.x),
.f = ~ mutate(.x, month = factor(month.abb[month], levels = month.abb))
) %>%
map_if( # if eddy tracks column is present, format eddy tracks as factors
.p = ~ "track" %in% names(.x),
.f = ~ mutate(.x, track = as_factor(track))
)
date_filter <- interval(start = as_date("2002-05-01"), # set initial time filter values
end = as_date("2002-08-31"))
depth_filter <- c(-200, # set initial depth filter values
-1000)
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[1],
depth_filter[2])
) # end of filters
View(data_filt)
depth_filter <- c(-1000, # set initial depth filter values
-200)
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[1],
depth_filter[2])
) # end of filters
unique(data_filt$eddy_tracks$track)
range(data_filt$eddy_tracks$longitude)
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_files <- data_names %>%
map(.f = read_csv, show_col_types = FALSE) %>% # import all csv files
set_names(nm = c("profiles", "profiles_mean", "eddy_tracks", "map_coords")) %>% # set names on each file
map_if( # if date column is present, format date column as dates
.p = ~ "date" %in% names(.x),
.f = ~ mutate(.x, date = as_date(date))
) %>%
map_if( # if month column is present, format month as abbreviations and set as factors
.p = ~ "month" %in% names(.x),
.f = ~ mutate(.x, month = factor(month.abb[month], levels = month.abb))
) %>%
map_if( # if eddy tracks column is present, format eddy tracks as factors
.p = ~ "track" %in% names(.x),
.f = ~ mutate(.x, track = as_factor(track))
)
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[1],
depth_filter[2])
) # end of filters
unique(data_filt$eddy_tracks$track)
runApp()
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[2],
depth_filter[1])
) # end of filters
View(data_files)
# date_filter <- interval(start = as_date("2002-05-01"), # set initial time filter values
#                         end = as_date("2002-08-31"))
#
depth_filter <- c(100, # set initial depth filter values
1000)
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[1],
depth_filter[2])
) # end of filters
runApp()
runApp()
View(data_filt)
runApp()
unique(data_filt$profiles$day)
runApp()
runApp()
View(data_filt)
runApp()
runApp()
unique(data_filt$profiles$date)
runApp()
runApp()
runApp()
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_files <- data_names %>%
map(.f = read_csv, show_col_types = FALSE) %>% # import all csv files
set_names(nm = c("profiles", "profiles_mean", "eddy_tracks", "map_coords")) %>% # set names on each file
map_if( # if date column is present, format date column as dates
.p = ~ "date" %in% names(.x),
.f = ~ mutate(.x, date = as_date(date))
) %>%
map_if( # if month column is present, format month as abbreviations and set as factors
.p = ~ "month" %in% names(.x),
.f = ~ mutate(.x, month = factor(month.abb[month], levels = month.abb))
) %>%
map_if( # if eddy tracks column is present, format eddy tracks as factors
.p = ~ "track" %in% names(.x),
.f = ~ mutate(.x, track = as_factor(track))
)
# set variable levels for selection input to CTD plots (would prefer a different referencing style)
variables <- names(data_files$profiles)[10:length(data_files$profiles)]
# set min range for dates
min_date <- data_files %>%
map_if(.p = ~ "date" %in% names(.x), .f = ~ min(.x$date, na.rm = TRUE)) %>%
map_df(~ if(is.Date(.x)) .x) %>%
pivot_longer(cols = everything()) %>%
summarise(min = min(value))
View(min_date)
# set min range for dates
min_date <- data_files %>%
map_if(.p = ~ "date" %in% names(.x), .f = ~ min(.x$date, na.rm = TRUE)) %>%
map_df(~ if(is.Date(.x)) .x) %>%
pivot_longer(cols = everything()) %>%
summarise(min = min(value)) %>%
as_vector()
# set min range for dates
min_date <- data_files %>%
map_if(.p = ~ "date" %in% names(.x), .f = ~ min(.x$date, na.rm = TRUE)) %>%
map_df(~ if(is.Date(.x)) .x) %>%
pivot_longer(cols = everything()) %>%
summarise(min = min(value))
# set max range for dates
max_date <- data_files %>%
map_if(.p = ~ "date" %in% names(.x), .f = ~ max(.x$date, na.rm = TRUE)) %>%
map_df(~ if(is.Date(.x)) .x) %>%
pivot_longer(cols = everything()) %>%
summarise(max = max(value))
date_filter <- interval(start = as_date("2002-05-01"), # set initial time filter values
end = as_date("2002-08-31"))
depth_filter <- c(100, # set initial depth filter values
1000)
data_filt <- data_files %>%
map_if( # time filter
.p = ~ "date" %in% names(.x),
.f = filter, date %within% date_filter
) %>%
map_if( # depth filter
.p = ~ "depth" %in% names(.x),
.f = filter, between(depth,
depth_filter[1],
depth_filter[2])
) # end of filters
View(data_filt)
runApp()
runApp()
str(data_filt$profiles)
runApp()
runApp()
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_names
runApp()
shiny::runApp()
oce::swSigma0(salinity = 36.6, temperature = 30, pressure = 0)
oce::swSigma0(salinity = 36.6, temperature = 30, pressure = 1)
help("swSigma0")
runApp()
library(shiny)
library(shinydashboard)
library(shinythemes)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_names
shiny::runApp()
x <- paste(c("d", "b"))
paste(.vars)
paste(x)
runApp()
data_names <- list.files( # import file paths
path = ".",
pattern = ".*.csv$",
full.names = TRUE,
recursive = TRUE
)
data_files <- data_names %>%
map(.f = read_csv, show_col_types = FALSE) %>% # import all csv files
set_names(nm = c("profiles", "profiles_mean", "eddy_tracks", "anomalies", "map_coords")) %>% # set names on each file
map_if( # if date column is present, format date column as dates
.p = ~ "date" %in% names(.x),
.f = ~ mutate(.x, date = as_date(date))
) %>%
map_if( # if month column is present, format month as abbreviations and set as factors
.p = ~ "month" %in% names(.x),
.f = ~ mutate(.x, month = factor(month.abb[month], levels = month.abb))
) %>%
map_if( # if eddy tracks column is present, format eddy tracks as factors
.p = ~ "track" %in% names(.x),
.f = ~ mutate(.x, track = as_factor(track))
)
View(data_files)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
